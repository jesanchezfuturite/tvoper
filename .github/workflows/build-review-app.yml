name: build-review-app
on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
    branches:
      - '*'
      - '!master'

jobs:
  deploy-review-app:
    name: Deploy Review App
    runs-on: ubuntu-latest

    steps:
    - name: Set env
      run: |
        BRANCH=$(echo "${{ github.head_ref }}" | sed "s/\//\-/g") &&
        BRANCH=$(echo "$BRANCH" | sed "s/\_/\-/g") &&
        BRANCH=$(echo "$BRANCH" | sed "s/[0-9]*//g") &&
        BRANCH=$(echo "$BRANCH" | sed "s/\.//g") &&
        BRANCH=$(echo "$BRANCH" | sed "s/\-$//g") &&
        BRANCH=$(echo "$BRANCH" | tr A-Z a-z) &&
        echo "BRANCH_PATH=deployed-$BRANCH" >> $GITHUB_ENV &&
        echo "BRANCH_NAME=$BRANCH" >> $GITHUB_ENV

    - name: Define new env vars
      env:
        DESCRIPTION: ${{ toJson(github.event.pull_request.body) }}
      run: |
        echo ${{ env.BRANCH_PATH }} &&
        echo ${{ env.BRANCH_NAME }} &&
        echo "$DESCRIPTION"
        CUSTOM_ENV=$(
          if [[ "$DESCRIPTION" =~ \[\:ENVS\:\]\\r\\n(.*)\\r\\n\[\:\/ENVS\:\] ]]
          then 
            echo ${BASH_REMATCH[1]}
          else
            echo null
          fi
        )
        echo $CUSTOM_ENV;
        CUSTOM_ENV=$(echo "$CUSTOM_ENV" | sed -z 's/\\r\\n/ /g;s/ $/\\r\\n/')
        echo "CUSTOM_ENV=($CUSTOM_ENV)" >> $GITHUB_ENV

    - name: start deployment
      uses: bobheadxi/deployments@v0.4.3
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: review-app-${{ env.BRANCH_NAME }}
        ref: ${{ github.head_ref }}

    - name: Checkout repository
      uses: actions/checkout@master

    - name: Install Open VPN
      run: sudo apt install openvpn -y && sudo apt install expect

    - name: Connect VPN
      uses: golfzaptw/action-connect-ovpn@master
      id: connect_vpn
      with:
        PING_URL: '127.0.0.1'
        FILE_OVPN: '.github/vpn/config.ovpn'
        SECRET: ${{ secrets.SECRET_USERNAME_PASSWORD }}
      env:
        CA_CRT: ${{ secrets.CA_CRT}}
        USER_CRT: ${{ secrets.USER_CRT }}
        USER_KEY: ${{ secrets.USER_KEY }}
          
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEV_ENDPOINT }}
        username: ${{ secrets.DEV_USER }}
        password: ${{ secrets.DEV_PASSWORD }}
        script: |
          CUSTOM_ENV=${{ env.CUSTOM_ENV }}
          branchPath=${{ env.BRANCH_PATH }} &&
          echo "$branchPath" &&
          cd ${{ secrets.DEV_FOLDER }} &&
          cd .. &&

          if [ -d "$branchPath" ];
          then
            test -f "$branchPath/.env" && cp $branchPath/.env .env.$branchPath;
            echo ${{ secrets.DEV_PASSWORD }} | sudo -S rm -Rf $branchPath;
          fi &&
          
          git clone -b ${{ github.head_ref }} --single-branch ${{ secrets.URL_REPO }} $branchPath &&
          cd $branchPath &&

          test -f "../.env.$branchPath" && cp ../.env.$branchPath .env;
          ! test -f "../.env.$branchPath" && cp ${{ secrets.DEV_FOLDER }}/.env .env;

          search_1="APP_URL=\"http:\/\/${{ secrets.DEV_ENDPOINT }}" &&
          search_3="ASSET_URL=\"http:\/\/${{ secrets.DEV_ENDPOINT }}\/public" &&
          search_4="MIX_ASSET_URL=\"http:\/\/${{ secrets.DEV_ENDPOINT }}\/public\/" &&
          
          replace_1="APP_URL=\"http:\/\/${{ secrets.DEV_ENDPOINT }}\/$branchPath\"\nAPP_PREFIX=\"\/$branchPath" &&
          replace_3="ASSET_URL=\"http:\/\/${{ secrets.DEV_ENDPOINT }}\/$branchPath\/public" &&
          replace_4="MIX_ASSET_URL=\"http:\/\/${{ secrets.DEV_ENDPOINT }}\/$branchPath\/public\/" &&

          sed -i "s/$search_1/$replace_1/gi" .env &&
          sed -i "s/$search_3/$replace_3/gi" .env &&
          sed -i "s/$search_4/$replace_4/gi" .env &&

          if($CUSTOM_ENV != null)
          then
            for element in "${CUSTOM_ENV[@]}"
            do
              IFS="=" read -a element <<< "$element"
              
              key="${element[0]}"
              val="${element[1]}"
              replace="$key=\"$val\""

              if grep -F $key .env
              then
                lineNum="$(grep -n "$key" .env | head -n 1 | cut -d: -f1)"
                totalLines="$(wc -l .env)"

                echo "$lineNum => $totalLines"
                
                sed -i "${lineNum}d" .env &&
                sed -i "${lineNum}i $replace" .env &&
                echo "Variable ($key) modificada con éxito"
              else
                echo "$key=\"$val\"" >> .env &&
                echo "Variable ($key) agregada con éxito"
              fi
            done
          fi

          composer install &&
          composer dump-autoload &&
          npm install &&
          npm run prod &&
          
          echo ${{ secrets.DEV_PASSWORD }} | sudo -S chown -R nginx storage &&
          echo ${{ secrets.DEV_PASSWORD }} | sudo -S chmod -R 777 storage public

    - name: kill vpn
      if: always()
      run: sudo killall openvpn

    - name: update deployment status
      uses: bobheadxi/deployments@v0.4.3
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
        env_url: "http://${{ secrets.DEV_ENDPOINT }}/${{ env.BRANCH_PATH }}/"